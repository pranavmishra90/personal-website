####################################
#            Licensing             #
####################################

# MIT License

# Copyright (c) 2020 Pranav Mishra

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This docker-compose file was inspired and modified
# from the excellent work of SmartHomeBeginner.
# They provide an excellent website and Github repository helping
# people launch a wordpress website behind Traefik using multiple
# stages of caching. I highly recommend visiting them at:
# https://www.smarthomebeginner.com/
# https://github.com/htpcBeginner
# Additional folders using work modified from SmartHomeBeginner
# contain their license in relevant directories.

# MIT License

# Copyright (c) 2019 SmartHomeBeginner

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version: "3.7"

####################################
#            Networks              #
####################################

networks:
  t2_proxy:
    external:
      name: t2_proxy
      #Created with docker network create --gateway 10.1.3.1 --subnet 10.1.3.0/24 t2_proxy
  default:
    driver: bridge

####################################
#            Secrets               #
####################################

secrets:
  cloudflare_email:
    file: $SECRETSDIR/cloudflare_email
  cloudflare_api_key:
    file: $SECRETSDIR/cloudflare_api_key
  mysql_root_password:
    file: $SECRETSDIR/mysql_root_password

  cloudflare_api_token:
    file: $SECRETSDIR/cloudflare_api_token

  authelia_jwt_secret:
    file: $SECRETSDIR/authelia_jwt_secret
  authelia_session_secret:
    file: $SECRETSDIR/authelia_session_secret
  authelia_storage_mysql_password:
    file: $SECRETSDIR/authelia_storage_mysql_password
  authelia_notifier_smtp_password:
    file: $SECRETSDIR/authelia_notifier_smtp_password
  authelia_encryption_key:
    file: $SECRETSDIR/authelia_encryption_key
  authelia_duo_api_secret_key:
    file: $SECRETSDIR/authelia_duo_api_secret_key

####################################
#            Services              #
####################################

services:
  # All services / apps go below this line

  # Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:2.2.1 #breaking change in 2.2.2
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: "5" # number of files or file count
        max-size: "10m" # file size
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      #      - --api.insecure=true
      #      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=WARN # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # Staging caServer commented out, time to get the real certificates
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
    networks:
      t2_proxy:
        ipv4_address: 10.1.3.245
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"

      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"

      ## Middlewares
      # - "traefik.http.routers.traefik-rtr.middlewares=middlewares-basic-auth@file" #basic authentication for traefik dashboard, per middlewares.toml
      # - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file" #authentication chains per middlewares-chains.toml
      # - "traefik.http.routers.traefik-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file" #rate limiting access
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-secure-headers@file,middlewares-rate-limit@file,chain-authelia@file" #security headers

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    # Check this before upgrading: https://github.com/authelia/authelia/blob/master/BREAKING.md
    image: authelia/authelia:4.29.4
    # restart: unless-stopped
    depends_on:
      - mariadb
    networks:
      - t2_proxy
      - default
    # ports:
    #   - "9091:9091"
    volumes:
      - $DOCKERDIR/authelia/config:/config
    environment:
      - TZ=$TZ
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/authelia_notifier_smtp_password
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_encryption_key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_mysql_password
      - authelia_notifier_smtp_password
      - authelia_encryption_key
      - authelia_duo_api_secret_key
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.authelia-rtr.entrypoints=https"
      - "traefik.http.routers.authelia-rtr.rule=Host(`authelia.$DOMAINNAME`)"
      - "traefik.http.routers.authelia-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file"
      ## HTTP Services
      - "traefik.http.routers.authelia-rtr.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"

  # Cloudflare DDNS - Dynamic DNS Updater - Update IP address of the VM automatically

  cf-ddns:
    container_name: Cloudflare-DDNS
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

  # Cloudflare-Companion - Automatic CNAME DNS Creation
  # This container is no longer needed since wildcard subdomains are now possible with cloudflare

  # cf-companion:
  #   container_name: cloudflare-companion
  #   image: tiredofit/traefik-cloudflare-companion:latest
  #   security_opt:
  #     - no-new-privileges:true
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #     - default
  #   #depends_on:
  #   #  - socket-proxy
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   environment:
  #     - TIMEZONE=$TZ
  #     - TRAEFIK_VERSION=2
  #     #- CF_EMAIL=$CLOUDFLARE_EMAIL
  #     - CF_TOKEN=$CLOUDFLARE_API_TOKEN
  #     - TARGET_DOMAIN=$DOMAINNAME
  #     - DOMAIN1=$DOMAINNAME
  #     - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
  #     - DOMAIN1_PROXIED=TRUE
  #     - DOCKER_ENTRYPOINT=unix://var/run/docker.sock
  #   secrets: # not working
  #     - cloudflare_api_token
  #   # labels:
  #   #   # Add hosts specified in rules here to force cf-companion to create the CNAMEs
  #   #   # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
  #   #   - "traefik.http.routers.cf-companion-rtr.rule=Host(`XYZ.$DOMAINNAME`)"

  # MariaDB - MySQL Database
  mariadb:
    container_name: mariadb
    image: linuxserver/mariadb:110.4.14mariabionic-ls77
    restart: always
    networks:
      t2_proxy:
        ipv4_address: 10.1.3.250
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKERDIR/mariadb/data:/config
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/mariadb/conf.d/custom.cnf:/etc/mysql/conf.d/custom.cnf:rw #Allow editing of custom.cnf MariaDB settings
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password # Not taking this pw during initialization
    secrets:
      - mysql_root_password

# Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    # ports:
    #  - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`ptr.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file" # Authelia authentication
      # - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # # VSCode - VSCode Editing
  # vscode:
  #   image: codercom/code-server:latest
  #   container_name: vscode
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #   volumes:
  #     - $DOCKERDIR:/home/coder/personal-website
  #     - $DOCKERDIR/vscode:/home/coder/vscode
  #     - $AZUREDIR/research:/home/coder/research
  #     - $AZUREDIR/github-profile:/home/coder/github-profile
  #   environment:
  #     PASSWORD: $VSCODE_PASSWORD
  #     # Run as root first time (user: 0), then stop container, then change permissions to user:docker and 775. Disable run as root below.
  #     user: $PUID:$PGID
  #     # user: "0"
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.vscode-rtr.entrypoints=https"
  #     - "traefik.http.routers.vscode-rtr.tls=true"
  #     - "traefik.http.routers.vscode-rtr.rule=Host(`vscode.$DOMAINNAME`)"
  #     ## Middlewares
  #     # - "traefik.http.routers.vscode-rtr.middlewares=chain-oauth@file"
  #     # - "traefik.http.routers.vscode-rtr.middlewares=chain-basic-auth@file"
  #     - "traefik.http.routers.vscode-rtr.middlewares=chain-authelia@file" # Authelia authentication

  #     ## HTTP Services
  #     - "traefik.http.routers.vscode-rtr.service=vscode-svc"
  #     - "traefik.http.services.vscode-svc.loadbalancer.server.port=8080"

  # phpMyAdmin - Database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    links:
      - mariadb
    networks:
      - t2_proxy
    #depends_on:
    #  - mariadb
    security_opt:
      - no-new-privileges:true
    # volumes:
    #  - $DOCKERDIR/phpmyadmin:/etc/phpmyadmin
    environment:
      - PMA_HOST=mariadb
      - MYSQL_USER=pranav
      - PMA_PORT=3306
      # - PMA_ARBITRARY=1
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
    secrets:
      - mysql_root_password
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"
      - "traefik.http.routers.phpmyadmin-rtr.tls=true"
      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`pma.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-no-auth@file"
      # - "traefik.http.routers.phpmyadmin-rtr.middlewares=chain-authelia@file" # Authelia authentication

      ## HTTP Services
      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

  # PHP - Hypertext Preprocessor
  php7:
    container_name: php7
    image: pranavmishra90/php:latest
    restart: unless-stopped
    user: $PUID:$PGID # allows upgrading WP and plugins
    networks:
      - t2_proxy
    volumes:
      - $DOCKERDIR/sites/wordpress/html:/var/www/html/wordpress
      - $DOCKERDIR/php/php7:/usr/local/etc/php
      #Matomo
      - $DOCKERDIR/sites/matomo:/var/www/html/matomo

  # Nginx - Web Server
  nginx:
    container_name: nginx
    image: nginx:1.18
    restart: unless-stopped
    depends_on:
      - php7
    networks:
      - t2_proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/log/nginx:/var/log/nginx
      - $DOCKERDIR/nginx:/etc/nginx
      - $DOCKERDIR/shared/.htpassd:/shared/.htpasswd
      - $DOCKERDIR/sites/wordpress/html:/var/www/html/wordpress:rw

      #Matomo
      - $DOCKERDIR/sites/matomo:/var/www/html/matomo

    labels:
      - "traefik.enable=true"
      ## HTTP Routers Wordpress (Dr. Pranav Mishra) Authenticated Access
      - "traefik.http.routers.nginx-wordpress-auth-rtr.entrypoints=https"
      - "traefik.http.routers.nginx-wordpress-auth-rtr.tls=true"
      - "traefik.http.routers.nginx-wordpress-auth-rtr.rule=Host(`www.$DOMAINNAME`) && Path(`/wp-login.php`)"
      - "traefik.http.routers.nginx-wordpress-auth-rtr.priority=100"
      ## HTTP Routers Wordpress (Dr. Pranav Mishra) PHP OpCache Authenticated Access
      - "traefik.http.routers.nginx-wordpress-opcache-rtr.entrypoints=https"
      - "traefik.http.routers.nginx-wordpress-opcache-rtr.tls=true"
      - "traefik.http.routers.nginx-wordpress-opcache-rtr.rule=Host(`www.$DOMAINNAME`) && Path(`/opcache.php`)"
      - "traefik.http.routers.nginx-wordpress-opcache-rtr.priority=98"
      ## HTTP Routers Wordpress (Dr. Pranav Mishra) Bypass - Anyone can access
      - "traefik.http.routers.nginx-wordpress-rtr.entrypoints=https"
      - "traefik.http.routers.nginx-wordpress-rtr.tls=true"
      - "traefik.http.routers.nginx-wordpress-rtr.rule=Host(`$DOMAINNAME`) || Host(`www.$DOMAINNAME`)"
      - "traefik.http.routers.nginx-wordpress-rtr.priority=99"

      # ## HTTP Routers PREPAREDx routing
      # - "traefik.http.routers.nginx-preparedx-testing-rtr.entrypoints=https"
      # - "traefik.http.routers.nginx-preparedx-testing-rtr.tls=true"
      # - "traefik.http.routers.nginx-preparedx-testing-rtr.rule=Host(`www.$DOMAINNAME`) && Path(`/preparedx-*)"

      # Matomo
      - "traefik.http.routers.nginx-matomo-rtr.entrypoints=https"
      - "traefik.http.routers.nginx-matomo-rtr.tls=true"
      - "traefik.http.routers.nginx-matomo-rtr.rule=Host(`matomo.$DOMAINNAME`)"
      - "traefik.http.routers.nginx-matomo-rtr.priority=95"

      # Redirect Wordpress non-www to www middleware
      - "traefik.http.middlewares.wordpress-redirect.redirectregex.regex=^https?://$DOMAINNAME/(.*)"
      - "traefik.http.middlewares.wordpress-redirect.redirectregex.replacement=https://www.$DOMAINNAME/$${1}"
      - "traefik.http.middlewares.wordpress-redirect.redirectregex.permanent=true"

      ## Middlewares

      - "traefik.http.routers.nginx-wordpress-rtr.middlewares=wordpress-redirect,chain-no-auth@file" ##Website open to everyone, no auth
      - "traefik.http.routers.nginx-wordpress-auth-rtr.middlewares=wordpress-redirect,chain-authelia@file" #Backend requiring authelia
      # - "traefik.http.routers.nginx-wordpress-auth-rtr.middlewares=wordpress-redirect,chain-basic-auth@file" #Backend requiring HTTP authentication
      - "traefik.http.routers.nginx-wordpress-opcache-rtr.middlewares=chain-authelia@file" #OPCache requring HTTP authentication

      #### Preparedx
      - "traefik.http.routers.nginx-preparedx-testing-rtr.middlewares=chain-authelia@file"
      ####Matomo
      - "traefik.http.routers.nginx-matomo-rtr.middlewares=chain-authelia@file"

      ## HTTP Services
      - "traefik.http.routers.nginx-wordpress-rtr.service=nginx-svc"
      - "traefik.http.routers.nginx-wordpress-auth-rtr.service=nginx-svc"
      - "traefik.http.services.nginx-svc.loadbalancer.server.port=80"

      ####Matomo
      - "traefik.http.routers.nginx-matomo-rtr.service=nginx-svc"

  # Redis - Key-value Store
  redis:
    container_name: redis
    image: redis:6.0.6
    restart: unless-stopped
    # entrypoint: redis-server --appendonly yes --requirepass $REDIS_PASSWORD --maxmemory 512mb --maxmemory-policy allkeys-lru
    entrypoint: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      # t2_proxy:
      #     ipv4_address: 10.1.3.210
      - t2_proxy
      - default
    security_opt:
      - no-new-privileges:true
    ports:
      - 6379:6379
    sysctls:
      - net.core.somaxconn=1024
    volumes:
      - $DOCKERDIR/redis/data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  # Wiki.js - a Wiki site built on JS
  wiki:
    image: ghcr.io/linuxserver/wikijs
    container_name: wikijs
    # links:
    #   - mariadb
    environment:
      - PUID=0
      - PGID=0
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/wiki/config:/config
      - $DOCKERDIR/wiki/data:/data
    ports:
      - 3000:3000
    restart: unless-stopped
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.wiki-rtr.entrypoints=https"
      - "traefik.http.routers.wiki-rtr.tls=true"
      - "traefik.http.routers.wiki-rtr.rule=Host(`foamed.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.wiki-rtr.middlewares=chain-no-auth@file"
      # - "traefik.http.routers.wiki-rtr.middlewares=chain-basic-auth@file" ## Website HTTP authentication
      # - "traefik.http.routers.wiki-rtr.middlewares=chain-authelia@file" # Authelia authentication

      ## HTTP Services
      - "traefik.http.routers.wiki-rtr.service=wiki-svc"
      - "traefik.http.services.wiki-svc.loadbalancer.server.port=3000"

  # duplicati:
  #   image: ghcr.io/linuxserver/duplicati
  #   container_name: duplicati
  #   environment:
  #     - PUID=0 #need to be root in order to read the files
  #     - PGID=0
  #     - TZ=$TZ
  #     # - CLI_ARGS= #optional
  #   volumes:
  #     - ~/duplicati/config:/config
  #     # - ~/backups:/backups #will not be storing local backups
  #     - $DOCKERDIR/:/drpm-website:ro #website backup
  #     - /home/pranav/research:/drpm-research:ro #research directory backup
  #     - /home/pranav/github-profile:/github-profile:ro #github profile page backup
  #   ports:
  #     - 8200:8200
  #   restart: unless-stopped
  #   networks:
  #     - t2_proxy
  #     - default
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.duplicati-rtr.entrypoints=https"
  #     - "traefik.http.routers.duplicati-rtr.tls=true"
  #     - "traefik.http.routers.duplicati-rtr.rule=Host(`duplicati.$DOMAINNAME`)"
  #     ## Middlewares
  #     # - "traefik.http.routers.duplicati-rtr.middlewares=chain-no-auth@file"
  #     - "traefik.http.routers.duplicati-rtr.middlewares=chain-authelia@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.duplicati-rtr.service=duplicati-svc"
  #     - "traefik.http.services.duplicati-svc.loadbalancer.server.port=8200"
